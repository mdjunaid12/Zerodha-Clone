{"version":3,"sources":["../src/index.js"],"names":["DEV","STAG","TEST","PROD","QA","ENV","process","env","NODE_ENV","IS_DEV","IS_TEST","IS_STAG","IS_PROD","IS_QA","assert","condition","content","error","Error","captureStackTrace","ccd","oldPrepareStackTrace","prepareStackTrace","err","stack","line","path","dirname","getFileName","req","name","defaultOnly","dir","resolve","module","require","default","isDir","stats","fs","statSync","isDirectory","e","config","object","defaults","httpError","code","meta","message","customMessage","type","customType","rest","status","statuses","isHttp","output","merge"],"mappings":"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","sourcesContent":["/**\n * Node Toolkit - Utility Functions\n *\n * @copyright Copyright (c) 2018, hugw.io\n * @author Hugo W - contact@hugw.io\n * @license MIT\n */\n\nimport path from 'path'\nimport fs from 'fs'\nimport merge from 'lodash/merge'\nimport snakeCase from 'lodash/snakeCase'\nimport toUpper from 'lodash/toUpper'\nimport statuses from 'statuses'\n\n/**\n * Environment\n * utility functions\n */\nconst DEV = 'development'\nconst STAG = 'staging'\nconst TEST = 'test'\nconst PROD = 'production'\nconst QA = 'qa'\n\nexport const ENV = process.env.NODE_ENV || DEV\n\nexport const IS_DEV = ENV === DEV\nexport const IS_TEST = ENV === TEST\nexport const IS_STAG = ENV === STAG\nexport const IS_PROD = ENV === PROD\nexport const IS_QA = ENV === QA\n\n/**\n * Executes simple assertions and\n * throw errors in negative cases\n */\nexport const assert = (condition, content) => {\n  if (condition) return\n  let error\n\n  if (content instanceof Error) {\n    error = content\n  } else if (typeof content === 'string') {\n    error = new Error(content)\n  } else {\n    error = new Error('Something went wrong.')\n  }\n\n  // Omits all frames above \"assert\" from the generated stack trace\n  Error.captureStackTrace(error, assert)\n  throw error\n}\n\n/**\n * Current caller directory\n * @link https://github.com/stefanpenner/get-caller-file/blob/master/index.js\n */\nexport const ccd = () => {\n  const oldPrepareStackTrace = Error.prepareStackTrace\n  Error.prepareStackTrace = (err, stack) => stack\n\n  const { stack } = new Error()\n  Error.prepareStackTrace = oldPrepareStackTrace\n\n  // stack[0] holds this file\n  // stack[1] holds where this function was called\n  // stack[2] holds the file we're interested in\n  const line = stack[2]\n  return !!line && path.dirname(line.getFileName())\n}\n\n/**\n * Require optional modules without\n * throwing unwanted exceptions\n */\nexport const req = (name, defaultOnly = true) => {\n  try {\n    const dir = path.resolve(ccd(), name)\n    const module = require(dir) // eslint-disable-line global-require, import/no-dynamic-require\n    return defaultOnly ? module.default : module\n  } catch (err) {\n    return null\n  }\n}\n\n/**\n * Verifies if current path\n * is a valid directory without\n * throwing unwanted exceptions\n */\nexport const isDir = (dir) => {\n  try {\n    const stats = fs.statSync(dir)\n    return stats.isDirectory()\n  } catch (e) { return false }\n}\n\n/**\n * Generates configuration objects based\n * on the current environment\n */\nexport const config = (object, defaults) => merge(\n  {},\n  defaults && defaults.default,\n  object && object.default,\n  defaults && defaults[ENV],\n  object && object[ENV],\n)\n\n/**\n * HTTP-friendly error objects\n */\nexport const httpError = (code, meta = {}) => {\n  const { message: customMessage, type: customType, ...rest } = meta\n\n  const status = statuses[code] ? code : 500\n  const message = customMessage || statuses[status]\n  const type = customType || toUpper(snakeCase(statuses[status]))\n\n  const error = new Error(message)\n\n  error.isHttp = true\n  error.output = {\n    status,\n    message,\n    type,\n    ...rest,\n  }\n\n  // Omits all frames above \"httpError\" from the generated stack trace\n  Error.captureStackTrace(error, httpError)\n\n  return error\n}\n\nexport default {\n  assert,\n  ccd,\n  req,\n  isDir,\n  config,\n  merge,\n  httpError,\n}\n"],"file":"index.js"}