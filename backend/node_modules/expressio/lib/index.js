"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = expressio;
exports.sanitize = exports.assert = exports.validateRequest = exports.validate = exports.httpError = exports.router = void 0;

var _express = _interopRequireDefault(require("express"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _cors = _interopRequireDefault(require("cors"));

var _compression = _interopRequireDefault(require("compression"));

var _ndtk = _interopRequireDefault(require("ndtk"));

var _dotenv = _interopRequireDefault(require("dotenv"));

var _semver = _interopRequireDefault(require("semver"));

require("express-async-errors");

var _utils = _interopRequireDefault(require("./utils"));

var _initializer = _interopRequireDefault(require("./logger/initializer"));

var _core = _interopRequireDefault(require("./core"));

var _events = _interopRequireDefault(require("./events"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Expressio
 *
 * @copyright Copyright (c) 2017, hugw.io
 * @author Hugo W - contact@hugw.io
 * @license MIT
 */

/**
 * Expressio
 */
function expressio(opts) {
  // Load default options if provided
  const defaults = _ndtk.default.merge({
    root: null,
    name: null
  }, opts); // Attempt to get the current caller
  // directly, if none is provided, and use that as the root
  // of the application to enforce an opinated folder structure.


  const root = defaults.root || _ndtk.default.ccd();

  _ndtk.default.assert(root && _ndtk.default.isDir(root), 'Application root path is invalid.'); // Load environment variables


  _dotenv.default.config(); // Load config variables


  const config = _utils.default.config(`${root}/config`, './config'); // Ensure the current Node version installed is supported


  _ndtk.default.assert(_semver.default.gte(process.version, _semver.default.coerce(config.core.engine)), 'Current Node version is not supported.'); // Create a new Express server instance


  const server = (0, _express.default)(); // Extend initialize function

  server.initialize = _core.default.initialize; // Expose config object

  server.config = config; // Expose root path

  server.root = root; // Define the server environment

  server.set('env', config.core.env);
  server.env = config.core.env; // Parse incoming requests
  // to JSON format

  server.use(_bodyParser.default.json());
  server.use(_bodyParser.default.urlencoded({
    extended: true
  })); // Add GZIP compression support
  // for HTTP responses

  server.use((0, _compression.default)()); // Security
  // (CORS & HTTP Headers)

  server.use((0, _helmet.default)());
  server.use((0, _cors.default)(config.core.cors)); // Load core initializers

  server.initialize('logger', _initializer.default);
  server.initialize('events', _events.default); // Set server instance
  // initial value

  server.instance = null;
  /**
   * Start server
   */

  server.start = async () => {
    if (server.instance) return;

    try {
      server.use(_core.default.notFoundHandler); // Emit "beforeStart" events
      // to possibly register custom
      // error handlers

      await server.events.emit('beforeStart');
      server.use(_core.default.generalErrorHandler);
      await new Promise(res => {
        // Start a new server instance
        server.instance = server.listen(config.core.port, config.core.address, async () => {
          const {
            address,
            port
          } = server.instance.address();
          server.logger.info(`Server running â†’ ${address}:${port} @ ${server.env}`); // Emit "afterStart" events

          await server.events.emit('afterStart');
          res();
        });
      });
    } catch (err) {
      server.logger.error(err);
    }
  };
  /**
   * Stop server
   */


  server.stop = async () => {
    try {
      if (!server.instance) return; // Emit "beforeStop" events

      await server.events.emit('beforeStop'); // Close server instance

      server.instance.close(); // Emit "afterStop" events

      await server.events.emit('afterStop'); // Reset server instance

      server.instance = null;
    } catch (err) {
      _ndtk.default.assert(false, err);
    }
  };

  return server;
}
/**
 * Expose external
 * dependencies and utility
 * functions
 */


const router = _express.default.Router;
exports.router = router;
const {
  httpError,
  assert
} = _ndtk.default;
exports.assert = assert;
exports.httpError = httpError;
const {
  validate,
  validateRequest
} = _core.default;
exports.validateRequest = validateRequest;
exports.validate = validate;
const {
  sanitize
} = _utils.default;
exports.sanitize = sanitize;
//# sourceMappingURL=index.js.map