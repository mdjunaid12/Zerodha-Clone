{"version":3,"sources":["../src/core.js"],"names":["initialize","name","fn","server","ndtk","assert","length","validate","value","schema","isJoi","validSchema","Joi","object","result","stripUnknown","abortEarly","error","details","reduce","obj","current","message","type","path","map","item","replace","validateRequest","source","validSource","includes","req","res","next","httpError","attributes","generalErrorHandler","err","logger","app","output","isHttp","status","json","notFoundHandler"],"mappings":"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","sourcesContent":["/**\n * Core\n *\n * @copyright Copyright (c) 2018, hugw.io\n * @author Hugo W - contact@hugw.io\n * @license MIT\n */\n\nimport ndtk from 'ndtk'\nimport isFunction from 'lodash/isFunction'\nimport isString from 'lodash/isString'\nimport isNumber from 'lodash/isNumber'\nimport set from 'lodash/set'\nimport isPlainObject from 'lodash/isPlainObject'\nimport Joi from '@hapi/joi'\n\n/**\n * Load initializers\n */\nfunction initialize(name, fn) {\n  const server = this\n\n  ndtk.assert(isString(name) && name.length !== 0, 'Initialize error: name is not a string')\n  ndtk.assert(isFunction(fn), `Initialize error: \"${name}\" has not a valid function`)\n\n  fn(server)\n}\n\n/**\n * Execute Joi schema validations\n * and return parsed errors\n */\nconst validate = (value, schema) => {\n  // Ensure schema is a valid object\n  ndtk.assert((schema && schema.isJoi) || isPlainObject(schema), 'Validate error: the schema provided is not a valid object')\n  const validSchema = schema.isJoi ? schema : Joi.object(schema)\n\n  const result = Joi.validate(value, validSchema, { stripUnknown: true, abortEarly: false })\n\n  if (result.error) {\n    const { details } = result.error\n\n    const error = details.reduce((obj, current) => {\n      const { message, type, path } = current\n      set(obj, path.map(item => (isNumber(item) ? `[${item}]` : item)), { message: message.replace(/\"/g, ''), type })\n      return obj\n    }, {})\n\n    return { error }\n  }\n\n  return { value: result.value }\n}\n\n/**\n * Execute body/params/query validations\n * and throw formatted error objects for possible errors\n * or append sanitized data to the request object\n */\nconst validateRequest = (source, schema) => {\n  ndtk.assert(isString(source), 'Validate error: source is not a string')\n\n  const validSource = ['body', 'params', 'query'].includes(source)\n  ndtk.assert(validSource, 'Validate error: bad validation source, possible options are \"body\", \"params\", \"query\"')\n\n  return (req, res, next) => {\n    // First check for empty payloads\n    if (!req[source]) throw ndtk.httpError(422, { message: `Request ${source} data is missing`, type: 'VALIDATION' })\n\n    const { value, error } = validate(req[source], schema)\n\n    if (error) {\n      throw ndtk.httpError(422, { message: `Invalid request ${source} data`, type: 'VALIDATION', attributes: error })\n    }\n\n    // Reassign sanitized data back\n    // to the request object ( with unknown keys removed )\n    req[source] = value\n    next()\n  }\n}\n\n/**\n * Format all caught errors\n * and return an http error object\n */\nconst generalErrorHandler = (err, req, res, next) => { // eslint-disable-line\n  const { logger } = req.app\n\n  // For the purpose of logging at least a message\n  err.message = err.message || 'Something bad happened'\n\n  const { output } = err.isHttp ? err : ndtk.httpError()\n  if (output.status >= 500) logger.error(err)\n\n  res.status(output.status)\n  res.json({ ...output })\n}\n\n/**\n * Format not found routes\n * to return a 404 response\n */\nconst notFoundHandler = (req, res, next) => next(ndtk.httpError(404))\n\nexport default {\n  initialize,\n  generalErrorHandler,\n  notFoundHandler,\n  validateRequest,\n  validate,\n}\n"],"file":"core.js"}