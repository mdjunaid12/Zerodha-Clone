{"version":3,"sources":["../src/index.js"],"names":["expressio","opts","defaults","ndtk","merge","root","name","ccd","assert","isDir","dotenv","config","utils","semver","gte","process","version","coerce","core","engine","server","initialize","set","env","use","bodyParser","json","urlencoded","extended","cors","logger","events","instance","start","notFoundHandler","emit","generalErrorHandler","Promise","res","listen","port","address","info","err","error","stop","close","router","express","Router","httpError","validate","validateRequest","sanitize"],"mappings":"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","sourcesContent":["/**\n * Expressio\n *\n * @copyright Copyright (c) 2017, hugw.io\n * @author Hugo W - contact@hugw.io\n * @license MIT\n */\n\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport helmet from 'helmet'\nimport cors from 'cors'\nimport compress from 'compression'\nimport ndtk from 'ndtk'\nimport dotenv from 'dotenv'\nimport semver from 'semver'\n\nimport 'express-async-errors'\n\nimport utils from '@/utils'\nimport logger from '@/logger/initializer'\nimport core from '@/core'\nimport events from '@/events'\n\n/**\n * Expressio\n */\nexport default function expressio(opts) {\n  // Load default options if provided\n  const defaults = ndtk.merge({ root: null, name: null }, opts)\n\n  // Attempt to get the current caller\n  // directly, if none is provided, and use that as the root\n  // of the application to enforce an opinated folder structure.\n  const root = defaults.root || ndtk.ccd()\n  ndtk.assert(root && ndtk.isDir(root), 'Application root path is invalid.')\n\n  // Load environment variables\n  dotenv.config()\n\n  // Load config variables\n  const config = utils.config(`${root}/config`, './config')\n\n  // Ensure the current Node version installed is supported\n  ndtk.assert(semver.gte(process.version, semver.coerce(config.core.engine)), 'Current Node version is not supported.')\n\n  // Create a new Express server instance\n  const server = express()\n\n  // Extend initialize function\n  server.initialize = core.initialize\n\n  // Expose config object\n  server.config = config\n\n  // Expose root path\n  server.root = root\n\n  // Define the server environment\n  server.set('env', config.core.env)\n  server.env = config.core.env\n\n  // Parse incoming requests\n  // to JSON format\n  server.use(bodyParser.json())\n  server.use(bodyParser.urlencoded({ extended: true }))\n\n  // Add GZIP compression support\n  // for HTTP responses\n  server.use(compress())\n\n  // Security\n  // (CORS & HTTP Headers)\n  server.use(helmet())\n  server.use(cors(config.core.cors))\n\n  // Load core initializers\n  server.initialize('logger', logger)\n  server.initialize('events', events)\n\n  // Set server instance\n  // initial value\n  server.instance = null\n\n  /**\n   * Start server\n   */\n  server.start = async () => {\n    if (server.instance) return\n\n    try {\n      server.use(core.notFoundHandler)\n\n      // Emit \"beforeStart\" events\n      // to possibly register custom\n      // error handlers\n      await server.events.emit('beforeStart')\n\n      server.use(core.generalErrorHandler)\n\n      await new Promise((res) => {\n        // Start a new server instance\n        server.instance = server.listen(config.core.port, config.core.address, async () => {\n          const { address, port } = server.instance.address()\n          server.logger.info(`Server running â†’ ${address}:${port} @ ${server.env}`)\n\n          // Emit \"afterStart\" events\n          await server.events.emit('afterStart')\n\n          res()\n        })\n      })\n    } catch (err) {\n      server.logger.error(err)\n    }\n  }\n\n  /**\n   * Stop server\n   */\n  server.stop = async () => {\n    try {\n      if (!server.instance) return\n      // Emit \"beforeStop\" events\n      await server.events.emit('beforeStop')\n      // Close server instance\n      server.instance.close()\n      // Emit \"afterStop\" events\n      await server.events.emit('afterStop')\n      // Reset server instance\n      server.instance = null\n    } catch (err) {\n      ndtk.assert(false, err)\n    }\n  }\n\n  return server\n}\n\n/**\n * Expose external\n * dependencies and utility\n * functions\n */\nconst router = express.Router\nconst { httpError, assert } = ndtk\nconst { validate, validateRequest } = core\nconst { sanitize } = utils\n\nexport {\n  router,\n  httpError,\n  validate,\n  validateRequest,\n  assert,\n  sanitize,\n}\n"],"file":"index.js"}