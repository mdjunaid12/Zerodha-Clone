"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _winston = require("winston");

var _chalk = _interopRequireDefault(require("chalk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const timestamp = (0, _winston.format)(info => {
  const date = new Date().toISOString();
  return _objectSpread({}, info, {
    timestamp: _chalk.default.grey(date)
  });
});
const level = (0, _winston.format)(info => {
  const {
    level: lvl
  } = info;
  const color = {
    error: _chalk.default.red,
    warn: _chalk.default.yellow,
    info: _chalk.default.green,
    verbose: _chalk.default.blue,
    debug: _chalk.default.cyan,
    silly: _chalk.default.magenta
  };
  return _objectSpread({}, info, {
    level: color[lvl](`[${lvl}]`)
  });
});
/**
 * Default Winston
 * formatter which includes
 * colored timestamp, level and final message
 */

var _default = _winston.format.combine(timestamp(), level(), // Print message
_winston.format.printf(info => `${info.timestamp} ${info.level} ${info.message}`));

exports.default = _default;
//# sourceMappingURL=output.js.map