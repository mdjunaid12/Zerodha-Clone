"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var winston = _interopRequireWildcard(require("winston"));

var _joi = _interopRequireDefault(require("@hapi/joi"));

var _utils = _interopRequireDefault(require("../utils"));

var _formatter = _interopRequireDefault(require("./formatter"));

var _middleware = _interopRequireDefault(require("./middleware"));

var _output = _interopRequireDefault(require("./output"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Object schemas
 * to validate configuration
 */
const schema = _joi.default.object({
  level: _joi.default.string().required(),
  // @TODO Allow only npm level strings
  silent: _joi.default.boolean().required(),
  prettify: _joi.default.boolean().required(),
  transports: _joi.default.object({
    file: _joi.default.boolean().required(),
    console: _joi.default.boolean().required()
  }).required()
});

var _default = server => {
  const {
    config
  } = server;

  const {
    level,
    silent,
    prettify,
    transports
  } = _utils.default.sanitize(config.core.logger, schema, 'Invalid Logger config'); // Setup Winston logger instance


  const instance = winston.createLogger({
    level: 'info',
    format: _output.default
  }); // Setup console transport

  if (transports.console) {
    instance.add(new winston.transports.Console());
  } // Setup file transport


  if (transports.file) {
    instance.add(new winston.transports.File({
      filename: `logs/${server.env}.log`
    }));
  } // Setup Winston configs


  instance.level = level;
  instance.silent = silent; // Expose Logger API to the server object

  server.logger = _objectSpread({
    instance,
    transports: winston.transports
  }, ['error', 'warn', 'info', 'verbose', 'silly', 'debug'].reduce((acc, cur) => _objectSpread({}, acc, {
    [cur]: (...args) => {
      const strings = args.map(arg => (0, _formatter.default)(arg, {
        prettify
      }));
      instance[cur](strings.join(' '));
    }
  }), {})); // Log request/response info

  server.use(_middleware.default);
};

exports.default = _default;
//# sourceMappingURL=initializer.js.map