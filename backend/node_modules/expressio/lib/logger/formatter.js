"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _util = _interopRequireDefault(require("util"));

var _isObject = _interopRequireDefault(require("lodash/isObject"));

var _redactSecrets = _interopRequireDefault(require("redact-secrets"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Logger formatter
 *
 * @copyright Copyright (c) 2018, hugw.io
 * @author Hugo W - contact@hugw.io
 * @license MIT
 */
const redact = (0, _redactSecrets.default)('[REDACTED]'); // Update inspect colors

_util.default.inspect.styles.string = 'white';
const inspectOptions = {
  colors: true,
  depth: null,
  compact: false
};

const isError = e => e && e.stack && e.message && typeof e.stack === 'string' && typeof e.message === 'string';

function parseJSON(string) {
  try {
    const content = JSON.parse(string);
    if (content && typeof content === 'object') return content;
  } catch (e) {} // eslint-disable-line


  return string;
} // Request status code


const reqStatus = info => {
  const {
    status
  } = info;
  let color = _chalk.default.red;
  if (status < 400) color = _chalk.default.green;
  if (status >= 400 && status < 500) color = _chalk.default.yellow;
  return color(status);
}; // Request extras (size / type / time)


const reqExtras = info => {
  const {
    time,
    size,
    type
  } = info;
  const sizeLabel = size ? `/ ${size}b` : '';
  const typeLabel = type ? `/ ${type}` : '';
  return _chalk.default.gray(`${time}ms ${sizeLabel} ${typeLabel}`);
}; // Request response


const reqRes = (info, prettify) => {
  // Parse response if JSON
  const parsed = parseJSON(info.response);
  const string = (0, _isObject.default)(parsed) ? JSON.stringify(parsed) : parsed;
  const response = prettify ? _util.default.inspect(parsed, inspectOptions) : string;
  return _chalk.default.gray(`\n Response → ${response}`);
}; // Request payload


const reqPayload = (info, prettify) => {
  const redactedBody = redact.map(info.payload);
  const payload = prettify ? _util.default.inspect(redactedBody, inspectOptions) : JSON.stringify(redactedBody);
  return _chalk.default.gray(`\n Payload → ${payload}`);
};
/**
 * Main formatter
 */


var _default = (info, {
  prettify
}) => {
  /**
   * Errors
   */
  if (isError(info)) {
    const message = _chalk.default.red(info.message); // Remove first line (duplicate of message)


    const lines = info.stack.substring(info.stack.indexOf('\n') + 1);

    const stack = _chalk.default.red(lines);

    return `${message} \n${stack}`;
  }
  /**
   * Request
   */


  if ((0, _isObject.default)(info) && info.isReq) {
    const status = reqStatus(info);
    const extras = reqExtras(info);
    const response = reqRes(info, prettify);
    const payload = reqPayload(info, prettify);
    const {
      method,
      path
    } = info;
    return `${method} ${path}  ${status}  ${extras} ${payload} ${response}`;
  }
  /**
   * Objects
   */


  if ((0, _isObject.default)(info)) {
    const redactedObject = redact.map(info);
    const message = prettify ? _util.default.inspect(redactedObject, inspectOptions) : JSON.stringify(redactedObject);
    return _chalk.default.gray(message);
  }

  return info;
};

exports.default = _default;
//# sourceMappingURL=formatter.js.map